/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OracleSlippageTestInterface extends ethers.utils.Interface {
  functions: {
    "WETH9()": FunctionFragment;
    "checkOracleSlippage(bytes[],uint128[],uint24,uint32)": FunctionFragment;
    "factory()": FunctionFragment;
    "poolDeployer()": FunctionFragment;
    "registerPool(address,address,address,uint24)": FunctionFragment;
    "setTime(uint256)": FunctionFragment;
    "testGetBlockStartingAndCurrentTick(address)": FunctionFragment;
    "testGetSyntheticTicks(bytes[],uint128[],uint32)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkOracleSlippage",
    values: [BytesLike[], BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerPool",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetBlockStartingAndCurrentTick",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetSyntheticTicks",
    values: [BytesLike[], BigNumberish[], BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkOracleSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testGetBlockStartingAndCurrentTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetSyntheticTicks",
    data: BytesLike
  ): Result;

  events: {};
}

export class OracleSlippageTest extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OracleSlippageTestInterface;

  functions: {
    WETH9(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "WETH9()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "checkOracleSlippage(bytes[],uint128[],uint24,uint32)"(
      paths: BytesLike[],
      amounts: BigNumberish[],
      maximumTickDivergence: BigNumberish,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "checkOracleSlippage(bytes,uint24,uint32)"(
      path: BytesLike,
      maximumTickDivergence: BigNumberish,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    factory(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "factory()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    poolDeployer(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "poolDeployer()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    registerPool(
      pool: string,
      tokenIn: string,
      tokenOut: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerPool(address,address,address,uint24)"(
      pool: string,
      tokenIn: string,
      tokenOut: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTime(
      _time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTime(uint256)"(
      _time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    testGetBlockStartingAndCurrentTick(
      pool: string,
      overrides?: CallOverrides
    ): Promise<{
      blockStartingTick: number;
      currentTick: number;
      0: number;
      1: number;
    }>;

    "testGetBlockStartingAndCurrentTick(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<{
      blockStartingTick: number;
      currentTick: number;
      0: number;
      1: number;
    }>;

    "testGetSyntheticTicks(bytes[],uint128[],uint32)"(
      paths: BytesLike[],
      amounts: BigNumberish[],
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      averageSyntheticAverageTick: BigNumber;
      averageSyntheticCurrentTick: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "testGetSyntheticTicks(bytes,uint32)"(
      path: BytesLike,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      syntheticAverageTick: BigNumber;
      syntheticCurrentTick: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;
  };

  WETH9(overrides?: CallOverrides): Promise<string>;

  "WETH9()"(overrides?: CallOverrides): Promise<string>;

  "checkOracleSlippage(bytes[],uint128[],uint24,uint32)"(
    paths: BytesLike[],
    amounts: BigNumberish[],
    maximumTickDivergence: BigNumberish,
    secondsAgo: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "checkOracleSlippage(bytes,uint24,uint32)"(
    path: BytesLike,
    maximumTickDivergence: BigNumberish,
    secondsAgo: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  poolDeployer(overrides?: CallOverrides): Promise<string>;

  "poolDeployer()"(overrides?: CallOverrides): Promise<string>;

  registerPool(
    pool: string,
    tokenIn: string,
    tokenOut: string,
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerPool(address,address,address,uint24)"(
    pool: string,
    tokenIn: string,
    tokenOut: string,
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTime(
    _time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTime(uint256)"(
    _time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  testGetBlockStartingAndCurrentTick(
    pool: string,
    overrides?: CallOverrides
  ): Promise<{
    blockStartingTick: number;
    currentTick: number;
    0: number;
    1: number;
  }>;

  "testGetBlockStartingAndCurrentTick(address)"(
    pool: string,
    overrides?: CallOverrides
  ): Promise<{
    blockStartingTick: number;
    currentTick: number;
    0: number;
    1: number;
  }>;

  "testGetSyntheticTicks(bytes[],uint128[],uint32)"(
    paths: BytesLike[],
    amounts: BigNumberish[],
    secondsAgo: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    averageSyntheticAverageTick: BigNumber;
    averageSyntheticCurrentTick: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "testGetSyntheticTicks(bytes,uint32)"(
    path: BytesLike,
    secondsAgo: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    syntheticAverageTick: BigNumber;
    syntheticCurrentTick: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  callStatic: {
    WETH9(overrides?: CallOverrides): Promise<string>;

    "WETH9()"(overrides?: CallOverrides): Promise<string>;

    "checkOracleSlippage(bytes[],uint128[],uint24,uint32)"(
      paths: BytesLike[],
      amounts: BigNumberish[],
      maximumTickDivergence: BigNumberish,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "checkOracleSlippage(bytes,uint24,uint32)"(
      path: BytesLike,
      maximumTickDivergence: BigNumberish,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    poolDeployer(overrides?: CallOverrides): Promise<string>;

    "poolDeployer()"(overrides?: CallOverrides): Promise<string>;

    registerPool(
      pool: string,
      tokenIn: string,
      tokenOut: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerPool(address,address,address,uint24)"(
      pool: string,
      tokenIn: string,
      tokenOut: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTime(_time: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setTime(uint256)"(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testGetBlockStartingAndCurrentTick(
      pool: string,
      overrides?: CallOverrides
    ): Promise<{
      blockStartingTick: number;
      currentTick: number;
      0: number;
      1: number;
    }>;

    "testGetBlockStartingAndCurrentTick(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<{
      blockStartingTick: number;
      currentTick: number;
      0: number;
      1: number;
    }>;

    "testGetSyntheticTicks(bytes[],uint128[],uint32)"(
      paths: BytesLike[],
      amounts: BigNumberish[],
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      averageSyntheticAverageTick: BigNumber;
      averageSyntheticCurrentTick: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "testGetSyntheticTicks(bytes,uint32)"(
      path: BytesLike,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      syntheticAverageTick: BigNumber;
      syntheticCurrentTick: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;
  };

  filters: {};

  estimateGas: {
    WETH9(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH9()"(overrides?: CallOverrides): Promise<BigNumber>;

    "checkOracleSlippage(bytes[],uint128[],uint24,uint32)"(
      paths: BytesLike[],
      amounts: BigNumberish[],
      maximumTickDivergence: BigNumberish,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkOracleSlippage(bytes,uint24,uint32)"(
      path: BytesLike,
      maximumTickDivergence: BigNumberish,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    "poolDeployer()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerPool(
      pool: string,
      tokenIn: string,
      tokenOut: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerPool(address,address,address,uint24)"(
      pool: string,
      tokenIn: string,
      tokenOut: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTime(_time: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setTime(uint256)"(
      _time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    testGetBlockStartingAndCurrentTick(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "testGetBlockStartingAndCurrentTick(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "testGetSyntheticTicks(bytes[],uint128[],uint32)"(
      paths: BytesLike[],
      amounts: BigNumberish[],
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "testGetSyntheticTicks(bytes,uint32)"(
      path: BytesLike,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH9(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH9()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "checkOracleSlippage(bytes[],uint128[],uint24,uint32)"(
      paths: BytesLike[],
      amounts: BigNumberish[],
      maximumTickDivergence: BigNumberish,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkOracleSlippage(bytes,uint24,uint32)"(
      path: BytesLike,
      maximumTickDivergence: BigNumberish,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolDeployer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerPool(
      pool: string,
      tokenIn: string,
      tokenOut: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerPool(address,address,address,uint24)"(
      pool: string,
      tokenIn: string,
      tokenOut: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTime(
      _time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTime(uint256)"(
      _time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    testGetBlockStartingAndCurrentTick(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "testGetBlockStartingAndCurrentTick(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "testGetSyntheticTicks(bytes[],uint128[],uint32)"(
      paths: BytesLike[],
      amounts: BigNumberish[],
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "testGetSyntheticTicks(bytes,uint32)"(
      path: BytesLike,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
