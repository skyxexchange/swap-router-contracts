/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { ImmutableStateTest } from "../ImmutableStateTest";

export class ImmutableStateTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _factoryV2: string,
    _positionManager: string,
    overrides?: Overrides
  ): Promise<ImmutableStateTest> {
    return super.deploy(
      _factoryV2,
      _positionManager,
      overrides || {}
    ) as Promise<ImmutableStateTest>;
  }
  getDeployTransaction(
    _factoryV2: string,
    _positionManager: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      _factoryV2,
      _positionManager,
      overrides || {}
    );
  }
  attach(address: string): ImmutableStateTest {
    return super.attach(address) as ImmutableStateTest;
  }
  connect(signer: Signer): ImmutableStateTest__factory {
    return super.connect(signer) as ImmutableStateTest__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ImmutableStateTest {
    return new Contract(address, _abi, signerOrProvider) as ImmutableStateTest;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factoryV2",
        type: "address",
      },
      {
        internalType: "address",
        name: "_positionManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "factoryV2",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "positionManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b506040516101573803806101578339818101604052604081101561003357600080fd5b5080516020909101516001600160601b0319606092831b8116608052911b1660a05260805160601c60a05160601c60dd61007a6000398060855250806061525060dd6000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806368e0d4e1146037578063791b98bc146059575b600080fd5b603d605f565b604080516001600160a01b039092168252519081900360200190f35b603d6083565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000008156fea264697066735822122094a78a3f4bb725cc888ec38a93f937ff1fb2faedb9daa390889cab66263b1c4364736f6c63430007060033";
