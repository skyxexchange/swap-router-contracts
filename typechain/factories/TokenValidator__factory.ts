/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { TokenValidator } from "../TokenValidator";

export class TokenValidator__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _factoryV2: string,
    _positionManager: string,
    overrides?: Overrides
  ): Promise<TokenValidator> {
    return super.deploy(
      _factoryV2,
      _positionManager,
      overrides || {}
    ) as Promise<TokenValidator>;
  }
  getDeployTransaction(
    _factoryV2: string,
    _positionManager: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      _factoryV2,
      _positionManager,
      overrides || {}
    );
  }
  attach(address: string): TokenValidator {
    return super.attach(address) as TokenValidator;
  }
  connect(signer: Signer): TokenValidator__factory {
    return super.connect(signer) as TokenValidator__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenValidator {
    return new Contract(address, _abi, signerOrProvider) as TokenValidator;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factoryV2",
        type: "address",
      },
      {
        internalType: "address",
        name: "_positionManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "baseTokens",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "amountToBorrow",
        type: "uint256",
      },
    ],
    name: "batchValidate",
    outputs: [
      {
        internalType: "enum ITokenValidator.Status[]",
        name: "isFotResults",
        type: "uint8[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "factoryV2",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "positionManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "skyxV2Call",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "baseTokens",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "amountToBorrow",
        type: "uint256",
      },
    ],
    name: "validate",
    outputs: [
      {
        internalType: "enum ITokenValidator.Status",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b50604051610e9b380380610e9b83398101604081905261002f91610069565b6001600160601b0319606092831b8116608052911b1660a05261009b565b80516001600160a01b038116811461006457600080fd5b919050565b6000806040838503121561007b578182fd5b6100848361004d565b91506100926020840161004d565b90509250929050565b60805160601c60a05160601c610dd76100c46000398061018252508061015e5250610dd76000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630143aace1461005c57806368e0d4e114610085578063791b98bc1461009a5780639e95ab99146100a2578063be7672e5146100b7575b600080fd5b61006f61006a3660046109ac565b6100d7565b60405161007c9190610bf6565b60405180910390f35b61008d61015c565b60405161007c9190610b97565b61008d610180565b6100b56100b0366004610a06565b6101a4565b005b6100ca6100c5366004610a97565b610393565b60405161007c9190610bab565b6000805b8381101561014e576000610110878787858181106100f557fe5b905060200201602081019061010a9190610974565b86610451565b9050600181600281111561012057fe5b14806101375750600281600281111561013557fe5b145b156101455791506101549050565b506001016100db565b50600090505b949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000339050600080826001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156101e557600080fd5b505afa1580156101f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021d9190610990565b836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561025657600080fd5b505afa15801561026a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028e9190610990565b9150915060008088116102a157816102a3565b825b90506000806102b487890189610b20565b91509150600082846001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016102e79190610b97565b60206040518083038186803b1580156102ff57600080fd5b505afa158015610313573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103379190610b08565b03905081811461037b5760408051808201825260038152621193d560ea1b6020820152905162461bcd60e51b81526103729190600401610c0a565b60405180910390fd5b60405162461bcd60e51b815260040161037290610c1d565b60608467ffffffffffffffff811180156103ac57600080fd5b506040519080825280602002602001820160405280156103d6578160200160208202803683370190505b50905060005b85811015610447576104108787838181106103f357fe5b90506020020160208101906104089190610974565b8686866100d7565b82828151811061041c57fe5b6020026020010190600281111561042f57fe5b9081600281111561043c57fe5b9052506001016103dc565b5095945050505050565b6000826001600160a01b0316846001600160a01b0316141561047557506000610760565b60006104f2306001600160a01b03166368e0d4e16040518163ffffffff1660e01b815260040160206040518083038186803b1580156104b357600080fd5b505afa1580156104c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104eb9190610990565b8686610767565b60408051600481526024810182526020810180516001600160e01b0316630dfe168160e01b17905290519192506000916001600160a01b0384169161053691610b7b565b6000604051808303816000865af19150503d8060008114610573576040519150601f19603f3d011682016040523d82523d6000602084013e610578565b606091505b5091505080516000141561059157600092505050610760565b6000818060200190518101906105a79190610990565b9050600080826001600160a01b0316896001600160a01b0316146105cd576000876105d1565b8660005b915091506000896001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016106039190610b97565b60206040518083038186803b15801561061b57600080fd5b505afa15801561062f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106539190610b08565b90506000869050806001600160a01b031663022c0d9f858530868e60405160200161067f929190610c68565b6040516020818303038152906040526040518563ffffffff1660e01b81526004016106ad9493929190610c76565b600060405180830381600087803b1580156106c757600080fd5b505af19250505080156106d8575060015b610748576106e4610ce3565b806106ef575061073e565b6106f881610827565b1561070e57600198505050505050505050610760565b61071781610870565b1561072d57600298505050505050505050610760565b600098505050505050505050610760565b3d6000803e3d6000fd5b60405162461bcd60e51b815260040161037290610c3e565b9392505050565b600080600061077685856108ce565b604080516bffffffffffffffffffffffff19606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501206001600160f81b031960688401529a90941b9093166069840152607d8301989098527fa795368f72739ee47c6b417165c10b6eae74f9c99804f7c42ef183686dda3f4b609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b6040805180820190915260038152621193d560ea1b6020918201528151908201207f0d441c7cb74abc94cc606c98870ca9174ef5b167b2f7ffed505658cf4574b003145b919050565b60408051808201909152600f8082526e1514905394d1915497d19052531151608a1b6020830152825160009291808210156108b1576000935050505061086b565b602092830181902091819003850190920191909120149050919050565b600080826001600160a01b0316846001600160a01b031614156108f057600080fd5b826001600160a01b0316846001600160a01b031610610910578284610913565b83835b90925090506001600160a01b03821661092b57600080fd5b9250929050565b60008083601f840112610943578182fd5b50813567ffffffffffffffff81111561095a578182fd5b602083019150836020808302850101111561092b57600080fd5b600060208284031215610985578081fd5b813561076081610d89565b6000602082840312156109a1578081fd5b815161076081610d89565b600080600080606085870312156109c1578283fd5b84356109cc81610d89565b9350602085013567ffffffffffffffff8111156109e7578384fd5b6109f387828801610932565b9598909750949560400135949350505050565b600080600080600060808688031215610a1d578081fd5b8535610a2881610d89565b94506020860135935060408601359250606086013567ffffffffffffffff80821115610a52578283fd5b818801915088601f830112610a65578283fd5b813581811115610a73578384fd5b896020828501011115610a84578384fd5b9699959850939650602001949392505050565b600080600080600060608688031215610aae578081fd5b853567ffffffffffffffff80821115610ac5578283fd5b610ad189838a01610932565b90975095506020880135915080821115610ae9578283fd5b50610af688828901610932565b96999598509660400135949350505050565b600060208284031215610b19578081fd5b5051919050565b60008060408385031215610b32578182fd5b50508035926020909101359150565b60008151808452610b59816020860160208601610cad565b601f01601f19169290920160200192915050565b60038110610b7757fe5b9052565b60008251610b8d818460208701610cad565b9190910192915050565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b81811015610bea57610bda838551610b6d565b9284019291840191600101610bc7565b50909695505050505050565b60208101610c048284610b6d565b92915050565b6000602082526107606020830184610b41565b6020808252600790820152662ab735b737bbb760c91b604082015260600190565b60208082526010908201526f2ab732bc3832b1ba32b21032b93937b960811b604082015260600190565b918252602082015260400190565b600085825284602083015260018060a01b038416604083015260806060830152610ca36080830184610b41565b9695505050505050565b60005b83811015610cc8578181015183820152602001610cb0565b83811115610cd7576000848401525b50505050565b60e01c90565b600060443d1015610cf357610d86565b600481823e6308c379a0610d078251610cdd565b14610d1157610d86565b6040513d600319016004823e80513d67ffffffffffffffff8160248401118184111715610d415750505050610d86565b82840192508251915080821115610d5b5750505050610d86565b503d83016020828401011115610d7357505050610d86565b601f01601f191681016020016040529150505b90565b6001600160a01b0381168114610d9e57600080fd5b5056fea2646970667358221220b29498e5bae63067a49bce19438ed24bc67cbb70c8b095db34d027e9b06f5e1364736f6c63430007060033";
