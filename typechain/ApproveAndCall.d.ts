/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ApproveAndCallInterface extends ethers.utils.Interface {
  functions: {
    "approveMax(address)": FunctionFragment;
    "approveMaxMinusOne(address)": FunctionFragment;
    "approveZeroThenMax(address)": FunctionFragment;
    "approveZeroThenMaxMinusOne(address)": FunctionFragment;
    "callPositionManager(bytes)": FunctionFragment;
    "factoryV2()": FunctionFragment;
    "getApprovalType(address,uint256)": FunctionFragment;
    "increaseLiquidity(tuple)": FunctionFragment;
    "mint(tuple)": FunctionFragment;
    "positionManager()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "approveMax", values: [string]): string;
  encodeFunctionData(
    functionFragment: "approveMaxMinusOne",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveZeroThenMax",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveZeroThenMaxMinusOne",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "callPositionManager",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "factoryV2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getApprovalType",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidity",
    values: [
      {
        token0: string;
        token1: string;
        tokenId: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        recipient: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "positionManager",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "approveMax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveMaxMinusOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveZeroThenMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveZeroThenMaxMinusOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callPositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factoryV2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApprovalType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positionManager",
    data: BytesLike
  ): Result;

  events: {};
}

export class ApproveAndCall extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ApproveAndCallInterface;

  functions: {
    approveMax(
      token: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "approveMax(address)"(
      token: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    approveMaxMinusOne(
      token: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "approveMaxMinusOne(address)"(
      token: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    approveZeroThenMax(
      token: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "approveZeroThenMax(address)"(
      token: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    approveZeroThenMaxMinusOne(
      token: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "approveZeroThenMaxMinusOne(address)"(
      token: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    callPositionManager(
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "callPositionManager(bytes)"(
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    factoryV2(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "factoryV2()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getApprovalType(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getApprovalType(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    increaseLiquidity(
      params: {
        token0: string;
        token1: string;
        tokenId: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "increaseLiquidity((address,address,uint256,uint256,uint256))"(
      params: {
        token0: string;
        token1: string;
        tokenId: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    mint(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        recipient: string;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "mint((address,address,uint24,int24,int24,uint256,uint256,address))"(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        recipient: string;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    positionManager(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "positionManager()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  approveMax(
    token: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "approveMax(address)"(
    token: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  approveMaxMinusOne(
    token: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "approveMaxMinusOne(address)"(
    token: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  approveZeroThenMax(
    token: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "approveZeroThenMax(address)"(
    token: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  approveZeroThenMaxMinusOne(
    token: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "approveZeroThenMaxMinusOne(address)"(
    token: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  callPositionManager(
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "callPositionManager(bytes)"(
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  factoryV2(overrides?: CallOverrides): Promise<string>;

  "factoryV2()"(overrides?: CallOverrides): Promise<string>;

  getApprovalType(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getApprovalType(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  increaseLiquidity(
    params: {
      token0: string;
      token1: string;
      tokenId: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "increaseLiquidity((address,address,uint256,uint256,uint256))"(
    params: {
      token0: string;
      token1: string;
      tokenId: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  mint(
    params: {
      token0: string;
      token1: string;
      fee: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      recipient: string;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "mint((address,address,uint24,int24,int24,uint256,uint256,address))"(
    params: {
      token0: string;
      token1: string;
      fee: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      recipient: string;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  positionManager(overrides?: CallOverrides): Promise<string>;

  "positionManager()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    approveMax(token: string, overrides?: CallOverrides): Promise<void>;

    "approveMax(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approveMaxMinusOne(token: string, overrides?: CallOverrides): Promise<void>;

    "approveMaxMinusOne(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approveZeroThenMax(token: string, overrides?: CallOverrides): Promise<void>;

    "approveZeroThenMax(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approveZeroThenMaxMinusOne(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveZeroThenMaxMinusOne(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    callPositionManager(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "callPositionManager(bytes)"(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    factoryV2(overrides?: CallOverrides): Promise<string>;

    "factoryV2()"(overrides?: CallOverrides): Promise<string>;

    getApprovalType(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "getApprovalType(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    increaseLiquidity(
      params: {
        token0: string;
        token1: string;
        tokenId: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "increaseLiquidity((address,address,uint256,uint256,uint256))"(
      params: {
        token0: string;
        token1: string;
        tokenId: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    mint(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        recipient: string;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "mint((address,address,uint24,int24,int24,uint256,uint256,address))"(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        recipient: string;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    positionManager(overrides?: CallOverrides): Promise<string>;

    "positionManager()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    approveMax(token: string, overrides?: PayableOverrides): Promise<BigNumber>;

    "approveMax(address)"(
      token: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    approveMaxMinusOne(
      token: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "approveMaxMinusOne(address)"(
      token: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    approveZeroThenMax(
      token: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "approveZeroThenMax(address)"(
      token: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    approveZeroThenMaxMinusOne(
      token: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "approveZeroThenMaxMinusOne(address)"(
      token: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    callPositionManager(
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "callPositionManager(bytes)"(
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    factoryV2(overrides?: CallOverrides): Promise<BigNumber>;

    "factoryV2()"(overrides?: CallOverrides): Promise<BigNumber>;

    getApprovalType(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getApprovalType(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    increaseLiquidity(
      params: {
        token0: string;
        token1: string;
        tokenId: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "increaseLiquidity((address,address,uint256,uint256,uint256))"(
      params: {
        token0: string;
        token1: string;
        tokenId: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    mint(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        recipient: string;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "mint((address,address,uint24,int24,int24,uint256,uint256,address))"(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        recipient: string;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    positionManager(overrides?: CallOverrides): Promise<BigNumber>;

    "positionManager()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    approveMax(
      token: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "approveMax(address)"(
      token: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    approveMaxMinusOne(
      token: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "approveMaxMinusOne(address)"(
      token: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    approveZeroThenMax(
      token: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "approveZeroThenMax(address)"(
      token: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    approveZeroThenMaxMinusOne(
      token: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "approveZeroThenMaxMinusOne(address)"(
      token: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    callPositionManager(
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "callPositionManager(bytes)"(
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    factoryV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factoryV2()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApprovalType(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getApprovalType(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    increaseLiquidity(
      params: {
        token0: string;
        token1: string;
        tokenId: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "increaseLiquidity((address,address,uint256,uint256,uint256))"(
      params: {
        token0: string;
        token1: string;
        tokenId: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        recipient: string;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "mint((address,address,uint24,int24,int24,uint256,uint256,address))"(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        recipient: string;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    positionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "positionManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
